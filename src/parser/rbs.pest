// module = {
//   "module" ~ whitespace+ ~ type_name ~ whitespace* ~ NEWLINE
//   ~ "end"
// }

//-----------------------------------------------------------------------------
// Types
//-----------------------------------------------------------------------------
t_type = {
  (t_class_name ~ t_type_arguments)
  | (t_interface_name ~ t_type_arguments)
  | ("singleton(" ~ whitespace* ~ t_class_name ~ whitespace* ~ ")")
  | t_alias_name
  | t_proc
  | t_self
  | t_instance
  | t_class
  | t_bool
  | t_untyped
  | t_nil
  | t_top
  | t_bot
  | t_void
}

t_class_name = { t_namespace? ~ path_element }
t_interface_name = { t_namespace? ~ "_" ~ path_element }
t_alias_name = { t_namespace? ~ alias }
alias = { ASCII_ALPHA_LOWER ~ slash_w* }
t_type_variable = { path_element }

t_type_arguments = {
  "[" ~ whitespace* ~ t_type ~ (whitespace* ~ "," ~ whitespace* ~ t_type)*
}

t_literal = {
  t_string_literal
  | t_symbol_literal
  | t_integer_literal
  | "true"
  | "false"
}

t_proc = {
  "^(" ~ whitespace* ~ parameters? ~ whitespace* ~ ")" ~ whitespace+ ~ "->" ~ t_type
}

// https://pest.rs/book/examples/json.html#writing-the-grammar
t_string_literal = ${
  double_quote ~ dq_string_content ~ double_quote
  | single_quote ~ sq_string_content ~ single_quote
}
double_quote = _{ "\"" }
single_quote = _{ "'" }

dq_string_content = @{ dq_string_char* }
dq_string_char = { !double_quote ~ ANY }
sq_string_content = @{ sq_string_char* }
sq_string_char = { !single_quote ~ ANY }

// https://gist.github.com/misfo/1072693
t_symbol_literal = {
  ":" ~
  (
    instance_variable | class_variable | global_variable | method_name | t_string_literal
  )
}
t_integer_literal = { ASCII_DIGIT+ ~ ("_" ~ ASCII_DIGIT)* }
instance_variable = { "@" ~ ("_" | ASCII_ALPHA)+ }
class_variable = { "@@" ~ ("_" | ASCII_ALPHA)+ }
global_variable = {
  "$" ~ (ASCII_DIGIT+ | "@" | "!" | "$" | "&" | "\"" | "'" | "/" | "." | "," | ";" | ":" | "`" | "~" | "\\" | "+")
}
method_name = { ("_" | ASCII_ALPHA_LOWER) ~ slash_w* ~ ("!" | "=" | "?")? }

// type_name = { namespace? ~ path_element }
t_namespace = { 
    "::"
    | (path_element ~ "::")+
}
path_element = { ASCII_ALPHA_UPPER ~ slash_w* }

t_self = { "self" }
t_instance = { "instance" }
t_class = { "class" }
t_bool = { "bool" }
t_untyped = { "untyped" }
t_nil = { "nil" }
t_top = { "top" }
t_bot = { "bot" }
t_void = { "void" }





//-----------------------------------------------------------------------------
// Method Types
//-----------------------------------------------------------------------------
method = {
  "def" ~ whitespace+ ~ method_name ~ ":" ~ whitespace+ ~ "->" ~ whitespace*
}

parameters = {
  required_positionals* ~ optional_positionals* ~ rest_positionals* ~ trailing_positionals* ~ keywords*
}

required_positionals = { parameter ~ (whitespace* ~ "," ~ whitespace* ~ parameter)* }
optional_positionals = { "?" ~ parameter ~ (whitespace* ~ "," ~ whitespace* ~ "?" ~ parameter)* }
rest_positionals = { "*" ~ parameter }
trailing_positionals = { parameter ~ (whitespace* ~ "," ~ whitespace* ~ "?" ~ parameter)* }
keywords = {
  "**" ~ parameter
  | keyword ~ ":" ~ whitespace* ~ parameter ~ (whitespace* ~ "," ~ whitespace* ~ keywords)
  | "?" ~ keyword ~ ":" ~ whitespace* ~ parameter ~ (whitespace* ~ "," ~ whitespace* ~ keywords)
}
keyword = { var_name }

parameter = { (t_type ~ whitespace+ ~ var_name) | t_type }
var_name = { ASCII_ALPHA_LOWER+ ~ slash_w* }

//-----------------------------------------------------------------------------
// Helpers
//-----------------------------------------------------------------------------
whitespace = _{ " " | "\t" }
slash_w = _{ ASCII_ALPHANUMERIC | "_" }

// vim: ft=rust
